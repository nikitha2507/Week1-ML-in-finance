# -*- coding: utf-8 -*-
"""Week1-NumPy_ML-in-Finance_Final_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1povzkEFskPt63mShWjnBGJ4mYmlEDW1x

<html> <h1 style="font-style:bold; color:blue;"> Machine Learning in Finance </h1> </html>

<html> <h1 style="font-style:italic; color:blue;"> Week-1 </h1> </html>
"""



"""# NumPy

The main python library used in numerical data analysis is NumPy (or Numpy). It is a Linear Algebra Library for Python.  It is a very important library for Data Science with Python mainly because Numpy is incredibly fast, as it has bindings to C libraries.

It provides a high-performance multidimensional array object, and tools for working with these arrays.

This practical gives only an introduction to Numpy.

## Installation NumPy

**In the case of using the Anaconda distribution, the Numpay has already been installed. If you have any problem with Numpay functionality, it is highly recommended to re-install Numpay using the following command:**
    
    install numpy

____________________________________________![image.png](attachment:d7dc4e19-f52e-4a93-b2f1-e4cd231d4be9.png)
"""

import numpy as np



"""One of the most popular features of the Numpy library is the capability of operations with arrays of different sizes (or ranks).

Dimensions of arrays:
- vectors - One dimensional arrays,
- matrices - Two dimensional arrays,
- tensor - Three or more arrays.

49.png![image.png](attachment:image.png)

____________________________________________![image.png](attachment:c8b0e131-8ac3-4605-b402-9cca1b5ba9d3.png)
"""





"""____________________________________________![image.png](attachment:565f7ffe-ea75-4f62-b130-093f60e7e041.png)"""





"""____________________________________________![image.png](attachment:cd442ab7-487e-4b31-ab69-0177198e683e.png)"""





"""____________________________________________![image.png](attachment:8acae197-093e-403c-adaa-e2eefa1cca1a.png)"""





"""____________________________________________![image.png](attachment:f676ad92-bb1d-49c6-bff6-e4aca2174453.png)"""





"""____________________________________________![image.png](attachment:193cd9e0-7861-4552-9ac9-237f88534427.png)"""







"""### arange

The arange() method is used to return an evenly spaced values within a given interval.
The method has the following parameters:
- **start** parameter (inclusive in the sequence)  
- **end** parameter (exclusive in the sequence)
- **step size** (optional parameter used to find the next element in the sequence)

____________________________________________![image.png](attachment:be72cd71-324f-4b2f-a9eb-9f58864ee035.png)
"""





"""____________________________________________![image.png](attachment:793515fa-88f9-471d-bb3d-6b28e65a20c1.png)"""







"""<html> <h3 style="font-style:italic; color:blue;"> Let us compare the performance of Numpay and Python arrays. </h3> </html>"""

# timeit - executes the code several times and gives statistics.

"""#### Now just press 'CTRL' and 'ENTER' keys on the next cells."""

# Commented out IPython magic to ensure Python compatibility.
# %timeit np.arange(0, 1000)

# Commented out IPython magic to ensure Python compatibility.
# %timeit range(0, 1000)



"""<html> <h3 style="color:blue;"> Numpy also provides many functions to create arrays </h3> </html>

____________________________________________![image.png](attachment:5644d1a1-af6f-499a-8b57-56e2b163cf07.png)
"""





"""____________________________________________![image.png](attachment:2b89ec2a-047e-4e58-9ca8-fcb0f4cb6b5b.png)"""





"""____________________________________________![image.png](attachment:267a89d5-8030-4262-b0b8-6c744458ad89.png)"""





"""____________________________________________![image.png](attachment:339d2c8c-51d3-4874-9dd6-ccc57337eeb1.png)"""





"""____________________________________________![image.png](attachment:155cb7d7-48d9-4b79-a551-503d42cca2b9.png)"""





"""____________________________________________![image.png](attachment:46117baf-57b3-493c-b73d-d3255b181220.png)"""







"""<html> <h3 style="color:blue;"> Array Indexing </h3> </html>

**Slicing:**
    Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array:

..................................................![image.png](attachment:11cabfa7-9787-4a3a-94d5-f27b5089bbea.png)
"""





"""____________________________________________![image.png](attachment:b4086256-1bbb-4e1c-820c-415d37eb11b2.png)"""





"""____________________________________________![image.png](attachment:f3b12e40-eda9-467d-9711-d9b57f20f6ea.png)"""





"""____________________________________________![image.png](attachment:3bf651f2-ee5c-4cf3-a41c-8bbfd13bd70f.png)"""







"""<html> <h3 style="color:blue;"> Datatypes </h3> </html>

Every NumPy array is a grid of elements of the **same type**. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but you can explicitly specify the type using an optional argument.

____________________________________________![image.png](attachment:acf9492f-76d6-451f-90d6-f8af21190883.png)
"""





"""____________________________________________![image.png](attachment:abd5f58f-2ced-436f-bf31-f5455975721d.png)"""





"""____________________________________________![image.png](attachment:cc855679-b5ab-4be8-859f-cbecf8a0fbba.png)"""







"""<html> <h3 style="color:blue;"> Array Math </h3> </html>"""

# Basic mathematical functions operate elementwise on arrays

""".....................................................![image.png](attachment:62b9a0d9-3d99-4b14-a8ad-3711111afd5f.png)

#### Now just press 'CTRL' and 'ENTER' keys on the next cell.
"""

x = np.array([[1,2],[3,4]], dtype=np.float64)
y = np.array([[5,6],[7,8]], dtype=np.float64)
print(x, '\n')       # '\n' - Line break symbol
print(y)



"""____________________________________________![image.png](attachment:c0c48780-516e-48fc-93be-796adc25d912.png)"""





"""____________________________________________![image.png](attachment:07714d60-442c-4abd-b584-a8d7af18d9bb.png)"""





"""____________________________________________![image.png](attachment:b6a795f3-e338-490f-a256-39a511082445.png)"""





"""____________________________________________![image.png](attachment:3ad4361b-8759-4cf4-acda-29ef1b7d6ffc.png)"""





"""____________________________________________![image.png](attachment:a6875e9c-4f66-42f3-a098-5d810431a65c.png)"""





"""____________________________________________![image.png](attachment:85fe41cf-7053-41c8-af99-29afb236745b.png)"""



"""____________________________________________![image.png](attachment:e098f400-88dd-4718-a254-9bad8f1d50a8.png)"""







"""<html> <h3 style="color:blue;"> Matrix Multiplication </h3> </html>"""

# Note that the above was elementwise multiplication, not matrix multiplication.
# To receive the matrix multiplication, we use the dot function.

"""#### Now just press 'CTRL' and 'ENTER' keys on the next cell."""

x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

v = np.array([9,10])
w = np.array([11, 12])
print(x, '\n\n', y, '\n\n', v, '\n\n', w)

"""![image.png](attachment:4775c518-47b9-4860-8f55-196766891597.png)

____________________________________________![image.png](attachment:f04b0822-51b3-4ca0-9645-e930c515bb4b.png)
"""





"""![image.png](attachment:86e4646b-afd4-45a8-bca2-92656bfba0fb.png)

Watch this video carefully at **home** and remember how matrices are multiplied

https://www.youtube.com/watch?v=2spTnAiQg4M

____________________________________________![image.png](attachment:fd6fab27-ad50-469c-95af-88d37aa1565c.png)
"""





# an example of matrix multiplication:

"""![image.png](attachment:134eb75e-46f0-4059-a113-23d0eb1e4b03.png)

____________________________________________![image.png](attachment:88ed560c-87be-4ced-bf7e-e8f7f1c9d370.png)
"""







"""<html> <h3 style="color:blue;"> Random number array generator </h3> </html>

____________________________________________![image.png](attachment:b66acf21-ce8f-41c8-bda0-8446e71611f6.png)
"""





"""____________________________________________![image.png](attachment:d502bc7f-c406-47cf-86b0-858b69aa0feb.png)"""







"""##### Normal distribution (Gaussian distribution)

![image.png](attachment:2a8d6d99-a743-406b-af0b-bded80612de1.png)

______________________![image.png](attachment:197e75d0-c7df-4e33-bbef-34d556c86be8.png)
"""





"""____________________________________________![image.png](attachment:cd9a9f30-f9b9-42fb-8243-ddb743ee01c3.png)"""





"""____________________________________________![image.png](attachment:998bb937-89a8-416e-99da-0109fb725b6e.png)"""







"""<html> <h3 style="color:blue;"> Reshape </h3> </html>

The shape (dimensions) of the array can be changed using the reshape() method
This returns an array containing the same data with a new shape.

____________________________________________![image.png](attachment:288fc1d4-3930-4e62-8ec9-63be664670c3.png)
"""





"""____________________________________________![image.png](attachment:3c35d8d2-17f4-43bc-a513-155af5c09df6.png)"""





"""____________________________________________![image.png](attachment:2ca2045d-3dba-4c89-aeac-8176014a3cdf.png)"""







"""##### Transposing a Matrix

![image.png](attachment:ae787138-a47b-4140-9bec-99a532903bbd.png)

____________________________________________![image.png](attachment:1e9d411f-d355-4233-9180-639e7659446d.png)
"""





"""____________________________________________![image.png](attachment:f5b163a3-7ce4-4100-942b-efc07e220eed.png)

The command does not create an "empty" matrix in the sense of being filled with zeros or having no values. Instead, it returns a new array with the same shape and data type as p, but without initialising the elements â€” meaning the array elements contain random values that happened to be in memory at the time of allocation
"""





"""____________________________________________![image.png](attachment:4bc158d4-9ab4-45cb-8f92-48339dd3e6e5.png)"""







"""<html> <h3 style="color:blue;"> Functions </h3> </html>

____________________________________________![image.png](attachment:bf6cf184-57c9-4dd4-bfb2-7def73549040.png)
"""





# Numpy provides many useful functions for performing computations on arrays; one of the most useful is sum:

"""____________________________________________![image.png](attachment:a7779684-6a28-49f0-9c2f-4fab2a79a47e.png)"""





"""____________________________________________![image.png](attachment:26e7377d-c022-4e06-8ade-0f49b2759669.png)"""





"""____________________________________________![image.png](attachment:e7c61121-ac0a-43d5-a824-f12b26e99c73.png)"""





"""____________________________________________![image.png](attachment:0d80160c-983f-4bcf-9a16-6ce6911f9d4e.png)"""





"""____________________________________________![image.png](attachment:16c464a1-f29f-4bd6-8de8-e86eab73c66d.png)"""





"""____________________________________________![image.png](attachment:7ed980b3-88aa-43ee-a31d-3d664d24d492.png)"""





"""____________________________________________![image.png](attachment:7ca34411-c78a-4d05-8f4b-64459220ad88.png)"""







"""<html> <h3 style="color:blue;"> Shape </h3> </html>

The size of a Numpy array can be retrieved using the attribute named "shape". Please note it is not a method. Attribute does not use "()" when evoked.

____________________________________________![image.png](attachment:c1e69ea3-9843-4361-87d3-39c77f8936e4.png)
"""





"""____________________________________________![image.png](attachment:53dde3eb-9adf-400d-9d8b-e94692a80ef5.png)"""



"""The shape of an array can be changed with various commands. Note that the following three commands all return a modified array, but do not change the original array:

____________________________________________![image.png](attachment:d481818b-d0c0-4c0b-8443-2369390cc1fa.png)
"""





"""____________________________________________![image.png](attachment:e9a52f60-26dc-4230-97e6-b877ed8e8bba.png)"""





"""____________________________________________![image.png](attachment:4ac28c80-ba5d-4357-a3e7-6fba7fc3d9f4.png)"""







"""Change matrix a to **2-d** array with 1 column. Notice the two sets of brackets for a 2-d array with one column.

Save it in another array.

Check the shape attribute value.

____________________________________________![image.png](attachment:a3063539-2ef1-4ae3-a392-e9baf8ab8ca3.png)
"""





"""<html> <h3 style="font-style:italic; color:#FF0000;"> (!) From the point of view of mathematics - this is a 1-d vector.
However, in terms of Numpy, it is a 2-dimensional array.
</h3> </html>
"""



"""# Lab Logbook Requirement:

<html> <h3 style="font-style:italic; color:blue;">
1) Create a vector using np.arange.

Determine the number of the vector elements using the following method: Take the last two digits from your SID. It should be from 00 to 99. If this number is 10 or more, it becomes the required number of the vector elements. If it is less than 10, add 100 to your number.

For example, if your SID is 2287467, and the last two digits are 67, which is greater than 10. The required number is 67. If your SID is 2287407, and the last two digits are 07, which is less than 10. The required number is 107.

Then,

2) Change matrix a to 2-d array with 1 row. Print the array.
You should have the two sets of brackets for a 2-d array with one row.
3) Save it in another array. Print the array.
4) Check the shape attribute value.
5) Add the code and result to your Lab Logbook
</h3> </html>

<html> <h3 style="color:red;">
NOTE: DON'T FORGET TO SAVE AND BACK UP YOUR COMPLETED JUPYTER NOTEBOOK AND LAB LOGBOOK ON GITHUB OR ONEDRIVE.
</h3> </html>
"""

import numpy as np

import numpy as np
StudentID = 2453375
Digit = StudentID % 100

if Digit < 10:
    x = Digit + 100
else:
    x = Digit

s = np.arange(x)
print("Number of ele:", x)
print("Vector ele:", s)

s_2d = s.reshape(1, -1)
print("2D array with one row:\n", s_2d)


s = s_2d.copy()
print("Another array:\n", s)


y = s_2d.copy()
print("Shape attribute value of Another array:", y.shape)





